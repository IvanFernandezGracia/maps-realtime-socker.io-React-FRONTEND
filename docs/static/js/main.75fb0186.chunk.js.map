{"version":3,"sources":["context/SocketContext.js","hooks/useSocket.js","hooks/useMapbox.js","pages/MapaPage.js","MapasApp.js","index.js"],"names":["SocketContext","createContext","SocketProvider","children","serverPath","socket","useMemo","io","connect","useState","online","setOnline","useEffect","connected","on","useSocket","process","Provider","value","mapboxgl","accessToken","puntoInicial","lng","lat","zoom","MapaPage","mapaDiv","useRef","setRef","useCallback","node","current","marcadores","movimientoMarcador","Subject","nuevoMarcador","mapa","coords","setCoords","agregarMarcador","ev","id","lngLat","marker","Marker","v4","setLngLat","addTo","setDraggable","next","target","getLngLat","actualizarPosicion","map","Map","container","style","center","getCenter","toFixed","getZoom","nuevoMarcador$","movimientoMarcador$","useMapbox","useContext","Object","keys","key","subscribe","marcador","emit","className","ref","MapasApp","dotenv","config","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75fb0186.chunk.js","sourcesContent":["import React from \"react\";\nimport { createContext } from \"react\";\nimport { useSocket } from \"../hooks/useSocket\";\n\nexport const SocketContext = createContext();\n\nexport const SocketProvider = ({ children }) => {\n  const { socket, online } = useSocket(\n    process.env.NODE_ENV === \"development\"\n      ? process.env.REACT_APP_DOMAIN_DEV\n      : process.env.REACT_APP_DOMAIN_PROD\n  );\n\n  return (\n    <SocketContext.Provider value={{ socket, online }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport io from \"socket.io-client\";\n\nexport const useSocket = (serverPath) => {\n  const socket = useMemo(() => io.connect(serverPath), [serverPath]);\n  const [online, setOnline] = useState(false);\n\n  useEffect(() => {\n    setOnline(socket.connected);\n  }, [socket]);\n\n  useEffect(() => {\n    socket.on(\"connect\", () => setOnline(true));\n  }, [socket]);\n\n  useEffect(() => {\n    socket.on(\"disconnect\", () => setOnline(false));\n  }, [socket]);\n\n  return {\n    socket,\n    online,\n  };\n};\n","import { useRef, useState, useEffect, useCallback } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport { v4 } from \"uuid\";\nimport { Subject } from \"rxjs\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\n\nexport const useMapbox = (puntoInicial) => {\n  // Referencia al DIV del mapa\n  const mapaDiv = useRef();\n  const setRef = useCallback((node) => {\n    mapaDiv.current = node;\n  }, []);\n\n  // Referencia los marcadores\n  const marcadores = useRef({});\n\n  // Observables de Rxjs\n  const movimientoMarcador = useRef(new Subject());\n  const nuevoMarcador = useRef(new Subject());\n\n  // Mapa y coords\n  const mapa = useRef();\n  const [coords, setCoords] = useState(puntoInicial);\n\n  // función para agregar marcadores (desde otro front)\n  const agregarMarcador = useCallback((ev, id) => {\n    const { lng, lat } = ev.lngLat || ev;\n\n    const marker = new mapboxgl.Marker();\n    marker.id = id ?? v4();\n\n    marker.setLngLat([lng, lat]).addTo(mapa.current).setDraggable(true);\n\n    // Asignamos al objeto de marcadores\n    marcadores.current[marker.id] = marker;\n\n    if (!id) {\n      nuevoMarcador.current.next({\n        id: marker.id,\n        lng,\n        lat,\n      });\n    }\n\n    // escuchar movimientos del marcador\n    marker.on(\"drag\", ({ target }) => {\n      const { id } = target;\n      const { lng, lat } = target.getLngLat();\n      movimientoMarcador.current.next({ id, lng, lat });\n    });\n  }, []);\n\n  // Funcion para actualizar la ubicación del marcador\n  const actualizarPosicion = useCallback(({ id, lng, lat }) => {\n    marcadores.current[id].setLngLat([lng, lat]);\n  }, []);\n\n  // Crear UNA VEZ (1 effect) el mapa, solo cambiar sus propertys\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapaDiv.current,\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [puntoInicial.lng, puntoInicial.lat],\n      zoom: puntoInicial.zoom,\n    });\n\n    mapa.current = map;\n  }, [puntoInicial]);\n\n  // Cuando se mueve el mapa\n  useEffect(() => {\n    mapa.current?.on(\"move\", () => {\n      const { lng, lat } = mapa.current.getCenter();\n      setCoords({\n        lng: lng.toFixed(4),\n        lat: lat.toFixed(4),\n        zoom: mapa.current.getZoom().toFixed(2),\n      });\n    });\n  }, []);\n\n  // Agregar marcadores cuando hago click\n  useEffect(() => {\n    mapa.current?.on(\"click\", agregarMarcador);\n  }, [agregarMarcador]);\n\n  return {\n    agregarMarcador,\n    actualizarPosicion,\n    coords,\n    marcadores,\n    nuevoMarcador$: nuevoMarcador.current,\n    movimientoMarcador$: movimientoMarcador.current,\n    setRef,\n  };\n};\n","import React, { useContext, useEffect } from \"react\";\n\nimport { SocketContext } from \"../context/SocketContext\";\nimport { useMapbox } from \"../hooks/useMapbox\";\n\nconst puntoInicial = {\n  lng: -122.4725,\n  lat: 37.801,\n  zoom: 13.5,\n};\n\nexport const MapaPage = () => {\n  const {\n    setRef,\n    coords,\n    nuevoMarcador$,\n    movimientoMarcador$,\n    agregarMarcador,\n    actualizarPosicion,\n  } = useMapbox(puntoInicial);\n\n  const { socket } = useContext(SocketContext);\n\n  // Escuchar los marcadores existentes\n  useEffect(() => {\n    socket.on(\"marcadores-activos\", (marcadores) => {\n      for (const key of Object.keys(marcadores)) {\n        agregarMarcador(marcadores[key], key);\n      }\n    });\n  }, [socket, agregarMarcador]);\n\n  // Nuevo marcador\n  useEffect(() => {\n    nuevoMarcador$.subscribe((marcador) => {\n      socket.emit(\"marcador-nuevo\", marcador);\n    });\n  }, [nuevoMarcador$, socket]);\n\n  // Movimiento de Marcador\n  useEffect(() => {\n    movimientoMarcador$.subscribe((marcador) => {\n      socket.emit(\"marcador-actualizado\", marcador);\n    });\n  }, [socket, movimientoMarcador$]);\n\n  // Mover marcador mediante sockets\n  useEffect(() => {\n    socket.on(\"marcador-actualizado\", (marcador) => {\n      actualizarPosicion(marcador);\n    });\n  }, [socket, actualizarPosicion]);\n\n  // Escuchar nuevos marcadores\n  useEffect(() => {\n    socket.on(\"marcador-nuevo\", (marcador) => {\n      agregarMarcador(marcador, marcador.id);\n    });\n  }, [socket, agregarMarcador]);\n\n  return (\n    <>\n      <div className=\"info\">\n        Lng: {coords.lng} | lat: {coords.lat} | zoom: {coords.zoom}\n      </div>\n\n      <div ref={setRef} className=\"mapContainer\" />\n    </>\n  );\n};\n","import React from 'react'\n\nimport { SocketProvider } from './context/SocketContext'\nimport { MapaPage } from './pages/MapaPage'\n\nexport const MapasApp = () => {\n    return (\n        <SocketProvider>\n            <MapaPage />\n        </SocketProvider>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { MapasApp } from './MapasApp';\nimport dotenv from 'dotenv'\n\ndotenv.config()\n\nReactDOM.render(\n    <MapasApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}